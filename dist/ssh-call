#!/usr/bin/env bash

#  Copyright 2012-2025 Runag project contributors
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# This script was built from commit cbae47a1336261025c10f4613c7409ac749dcc5a

# Configure shell options unless the script is being sourced
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  # Enable trace output if RUNAG_VERBOSE is set to true
  if [ "${RUNAG_VERBOSE:-}" = true ]; then
    # Show subshell level, function name, source file, and line number in trace output
    PS4='+${FUNCNAME[0]:+" ${FUNCNAME[0]}"}${BASH_SOURCE:+" (${BASH_SOURCE}:${LINENO})"}   '
    set -o xtrace
  fi
  # Exit immediately if an unset variable is referenced
  set -o nounset
fi

fail () 
{ 
    local exit_status=1;
    local unless_good=false;
    local ignore_statuses;
    local perform_softfail=false;
    local trace_start=1;
    local message;
    while [ "$#" -gt 0 ]; do
        case "$1" in 
            -s | --status)
                if [ -z "${2:-}" ] || [[ "$2" =~ ^- ]]; then
                    printf "Missing argument for '%s' option.\n" "$1" 1>&2;
                    shift;
                else
                    if [[ ! "$2" =~ ^[0-9]+$ || "$2" -lt 0 || "$2" -gt 255 ]]; then
                        printf "Status code '%s' must be a number between 0 and 255.\n" "$2" 1>&2;
                        shift 2;
                    else
                        exit_status="$2";
                        shift 2;
                    fi;
                fi
            ;;
            -g | --unless-good)
                unless_good=true;
                shift
            ;;
            -u | --unless)
                if [ -z "${2:-}" ] || [[ "$2" =~ ^- ]]; then
                    printf "Missing argument for '%s' option.\n" "$1" 1>&2;
                    shift;
                else
                    ignore_statuses="$2";
                    shift 2;
                fi
            ;;
            -f | --soft)
                perform_softfail=true;
                shift
            ;;
            -w | --from-softfail-wrapper)
                perform_softfail=true;
                trace_start=2;
                shift
            ;;
            -*)
                printf "Unrecognized argument: '%s'.\n" "$1" 1>&2;
                shift;
                message="$*";
                break
            ;;
            *)
                message="$*";
                break
            ;;
        esac;
    done;
    if [ -z "${message:-}" ]; then
        message="An error occurred; refer to the stack trace for context.";
    fi;
    if [ "${unless_good}" = true ] && [ "${exit_status}" = 0 ]; then
        return 0;
    fi;
    if [ -n "${ignore_statuses:-}" ]; then
        local ignore_array ignore_item ignore_start ignore_end;
        IFS=',' read -ra ignore_array <<< "${ignore_statuses}";
        for ignore_item in "${ignore_array[@]}";
        do
            if [[ "${ignore_item}" =~ ^[0-9]+-[0-9]+$ ]]; then
                IFS='-' read -r ignore_start ignore_end <<< "${ignore_item}";
                if (( exit_status >= ignore_start && exit_status <= ignore_end )); then
                    return 0;
                fi;
            else
                if ! [[ "${ignore_item}" =~ ^[0-9]+$ ]]; then
                    printf "Ignored pattern '%s' is not a valid number or range.\n" "${ignore_item}" 1>&2;
                else
                    if [[ "${exit_status}" = "${ignore_item}" ]]; then
                        return 0;
                    fi;
                fi;
            fi;
        done;
    fi;
    if [ "${exit_status}" = 0 ]; then
        exit_status=1;
    fi;
    local error_prefix="[ERROR] " error_postfix="";
    if [ -t 2 ]; then
        error_prefix="$(printf "setaf 9\nbold" | tput -S 2> /dev/null)";
        error_postfix="$(tput sgr 0 2> /dev/null)";
    fi;
    printf "%s%s%s\n" "${error_prefix}" "${message}" "${error_postfix}" 1>&2;
    local trace_index trace_end=$((${#BASH_LINENO[@]} - 1));
    for ((trace_index=trace_start; trace_index<=trace_end; trace_index++))
    do
        printf "%s    at %s (%s:%s)%s\n" "${error_prefix}" "${FUNCNAME[${trace_index}]}" "${BASH_SOURCE[${trace_index}]}" "${BASH_LINENO[$((trace_index-1))]}" "${error_postfix}" 1>&2;
    done;
    if [ "${perform_softfail}" = true ]; then
        return "${exit_status}";
    fi;
    exit "${exit_status}"
}
softfail () 
{ 
    fail --from-softfail-wrapper "$@"
}
dir::ensure_exists () 
{ 
    local mode;
    local owner;
    local group;
    local sudo;
    while [ "$#" -gt 0 ]; do
        case "$1" in 
            -m | --mode)
                mode="$2";
                shift 2
            ;;
            -o | --owner)
                owner="$2";
                shift 2
            ;;
            -g | --group)
                group="$2";
                shift 2
            ;;
            -s | --sudo)
                sudo=true;
                shift
            ;;
            -u | --user-only)
                mode="${mode:-0700}";
                owner="${USER}";
                shift
            ;;
            -*)
                softfail "Unknown argument: $1";
                return $?
            ;;
            *)
                break
            ;;
        esac;
    done;
    local path="$1";
    if [ -n "${mode:-}" ]; then
        if ! [[ "${mode}" =~ ^[0-7]+$ ]]; then
            softfail "Invalid mode: Mode should be numeric" || return $?;
        fi;
        local umask_value;
        umask_value="$(printf "0%o" "$(( 0777 - "0${mode}" ))")" || softfail "Failed to calculate umask value" || return $?;
        if [ "${sudo:-}" = true ]; then
            sudo --shell '$SHELL' -c "$(printf "umask %q && mkdir -p %q" "${umask_value}" "${path}")" || softfail "Failed to create directory with sudo and specified mode" || return $?;
        else
            ( umask "${umask_value}" && mkdir -p "${path}" ) || softfail "Failed to create directory with specified mode" || return $?;
        fi;
        ${sudo:+"sudo"} chmod "${mode}" "${path}" || softfail "Failed to set permissions on the directory" || return $?;
    else
        ${sudo:+"sudo"} mkdir -p "${path}" || softfail "Failed to create directory" || return $?;
    fi;
    if [ -n "${owner:-}" ]; then
        if [ -z "${group:-}" ]; then
            group="$(id -g -n "${owner}")" || softfail "Failed to retrieve group for owner '${owner}'" || return $?;
        fi;
        ${sudo:+"sudo"} chown "${owner}:${group}" "${path}" || softfail "Failed to set ownership to ${owner}:${group}" || return $?;
    else
        if [ -n "${group:-}" ]; then
            ${sudo:+"sudo"} chgrp "${group}" "${path}" || softfail "Failed to set group ownership to '${group}'" || return $?;
        fi;
    fi
}
ssh::call () 
{ 
    local Ssh_Args=();
    local internal_args=();
    local keep_temp_files=false;
    local direct_mode=false;
    local terminal_mode=false;
    while [ "$#" -gt 0 ]; do
        case "$1" in 
            --root)
                local REMOTE_USER=root;
                shift
            ;;
            --user | -l)
                local REMOTE_USER="$2";
                shift;
                shift
            ;;
            -[46AaCfGgKkMNnqsTtVvXxYy]*)
                Ssh_Args+=("$1");
                shift
            ;;
            -[BbcDEeFIiJLmOopQRSWw])
                Ssh_Args+=("$1" "$2");
                shift;
                shift
            ;;
            --keep-temp-files)
                internal_args+=("$1");
                keep_temp_files=true;
                shift
            ;;
            --direct)
                internal_args+=("$1");
                direct_mode=true;
                shift
            ;;
            --terminal)
                internal_args+=("$1");
                terminal_mode=true;
                shift
            ;;
            --*)
                internal_args+=("$1");
                shift
            ;;
            -*)
                softfail "Unknown argument: $1" || return $?
            ;;
            *)
                break
            ;;
        esac;
    done;
    if [ "${keep_temp_files}" = false ] && [ "${REMOTE_KEEP_TEMP_FILES:-}" = true ]; then
        internal_args+=(--keep-temp-files);
        keep_temp_files=true;
    fi;
    ssh::call::set_ssh_args || softfail "Unable to set ssh args" || return $?;
    local temp_dir;
    temp_dir="$(mktemp -d)" || softfail "Unable to make temp file" || return $?;
    local locale_list=();
    if [ -n "${REMOTE_LOCALE:-}" ]; then
        IFS=" " read -r -a locale_list <<< "${REMOTE_LOCALE}" || softfail || return $?;
    fi;
    if [ "${#locale_list[@]}" != 0 ]; then
        ( unset -v LANG LANGUAGE "${!LC_@}" || softfail || return $?;
        local locale_item;
        for locale_item in "${locale_list[@]}";
        do
            export "${locale_item}" || softfail || return $?;
        done;
        ssh::call::internal --temp-dir "${temp_dir}" "${internal_args[@]}" "$@" );
    else
        ssh::call::internal --temp-dir "${temp_dir}" "${internal_args[@]}" "$@";
    fi;
    local exit_status=$?;
    if [ "${keep_temp_files}" != true ]; then
        local remove_list=("${temp_dir}/stdin" "${temp_dir}/stdout" "${temp_dir}/stderr");
        if [ "${exit_status}" = 0 ] || [ "${terminal_mode}" = true ] || { 
            [ "${direct_mode}" = true ] && [ "${exit_status}" = 255 ]
        }; then
            remove_list+=("${temp_dir}/script" "${temp_dir}");
        else
            echo "Script is kept due to abnormal termination: ${temp_dir}/script" 1>&2;
        fi;
        rm -fd "${remove_list[@]}" || softfail "Unable to remote temp files";
    fi;
    return "${exit_status}"
}
ssh::call::internal () 
{ 
    local produce_script_args=();
    local direct_mode=false;
    local terminal_mode=false;
    local keep_temp_files=false;
    local absorb_file;
    local temp_dir;
    local upload_path;
    local ssh_destination;
    while [ "$#" -gt 0 ]; do
        case "$1" in 
            --consume)
                absorb_file="$2";
                shift;
                shift
            ;;
            --command | --cmd)
                produce_script_args+=(--command);
                shift
            ;;
            --home)
                produce_script_args+=(--home);
                shift
            ;;
            --direct)
                direct_mode=true;
                shift
            ;;
            --terminal)
                produce_script_args+=(--terminal);
                terminal_mode=true;
                shift
            ;;
            --keep-temp-files)
                keep_temp_files=true;
                shift
            ;;
            --temp-dir)
                temp_dir="$2";
                shift;
                shift
            ;;
            --upload)
                upload_path="$2";
                shift;
                shift
            ;;
            -*)
                softfail "Unknown argument: $1" || return $?
            ;;
            *)
                break
            ;;
        esac;
    done;
    if [ -n "${REMOTE_HOST:-}" ]; then
        ssh_destination="${REMOTE_HOST}";
    else
        ssh_destination="$1";
        shift;
    fi;
    local resolved_upload_path;
    local rsync_ssh_args_string;
    local upload_remote_temp;
    local upload_rsync_dest;
    local upload_rsync_src;
    local upload_basename;
    if [ -n "${upload_path:-}" ]; then
        if [ -d "${upload_path}" ]; then
            resolved_upload_path="$(cd "${upload_path}" > /dev/null 2>&1 && pwd)" || softfail "Unable to resolve upload directory: ${upload_path}" || return $?;
            upload_basename="$(basename "${resolved_upload_path}")" || softfail || return $?;
            if [ "${upload_basename}" = "/" ]; then
                upload_basename=root;
            fi;
            upload_rsync_src="${resolved_upload_path}/";
        else
            upload_basename="$(basename "${upload_path}")" || softfail || return $?;
            upload_rsync_src="${upload_path}";
        fi;
        upload_remote_temp="$(ssh "${Ssh_Args[@]}" "${ssh_destination}" "mktemp -d")" || softfail --status $? "Unable to create remote temp directory for file upload" || return $?;
        upload_rsync_dest="${upload_remote_temp}/${upload_basename}";
        local ssh_args_item;
        for ssh_args_item in "${Ssh_Args[@]}";
        do
            rsync_ssh_args_string+=" '$(sed -E "s/'/''/" <<< "${ssh_args_item}")'" || softfail || return $?;
        done;
        rsync --rsh "ssh ${rsync_ssh_args_string:1}" --checksum --links --perms --recursive --safe-links --times "${upload_rsync_src}" "${ssh_destination}:${upload_rsync_dest}" || softfail || return $?;
        set -- "$@" "${upload_rsync_dest}";
    fi;
    local script_checksum;
    ssh::call::produce_script "${produce_script_args[@]}" "$@" > "${temp_dir}/script" || softfail "Unable to produce script" || return $?;
    script_checksum="$(cksum < "${temp_dir}/script")" || softfail "Unable to calculate script checksum" || return $?;
    local script_upload_command;
    printf -v script_upload_command 'temp_dir="$(mktemp -d)" && cat>"${temp_dir}/script" && { if [ "$(cksum <"${temp_dir}/script")" != %q ]; then exit 254; fi; } && echo "${temp_dir}"' "${script_checksum}" || softfail || return $?;
    local remote_temp_dir;
    remote_temp_dir="$(ssh "${Ssh_Args[@]}" "${ssh_destination}" "$(printf "sh -c %q" "${script_upload_command}")" < "${temp_dir}/script")" || softfail --status $? "Unable to upload script" || return $?;
    if [ -z "${remote_temp_dir}" ]; then
        softfail "Unable to get remote temp file name" || return $?;
    fi;
    if [ "${terminal_mode}" = true ]; then
        ssh::call::invoke --terminal "${remote_temp_dir}" "${ssh_destination}" 'bash "${temp_dir}/script"';
        local task_status=$?;
    else
        if [ "${direct_mode}" = true ]; then
            ssh::call::invoke "${remote_temp_dir}" "${ssh_destination}" 'bash "${temp_dir}/script"';
            local task_status=$?;
        else
            local remote_stdin_file="/dev/null";
            if [ ! -t 0 ] || [ -n "${absorb_file:-}" ]; then
                if [ -n "${absorb_file:-}" ]; then
                    mv "${absorb_file}" "${temp_dir}/stdin" || softfail "Unable to absorb file: ${absorb_file}" || return $?;
                else
                    cat > "${temp_dir}/stdin" || softfail "Unable to read stdin" || return $?;
                fi;
                if [ -s "${temp_dir}/stdin" ]; then
                    local stdin_checksum;
                    stdin_checksum="$(cksum < "${temp_dir}/stdin")" || softfail "Unable to get stdin checksum" || return $?;
                    ssh::call::invoke "${remote_temp_dir}" "${ssh_destination}" 'cat >"${temp_dir}/stdin"; if [ "$(cksum <"${temp_dir}/stdin")" != %q ]; then exit 254; fi' "${stdin_checksum}" < "${temp_dir}/stdin" || softfail --status $? "Unable to store stdin data on remote" || return $?;
                    remote_stdin_file="${remote_temp_dir}/stdin";
                fi;
            fi;
            ssh::call::invoke --nohup "${remote_temp_dir}" "${ssh_destination}" 'bash "${temp_dir}/script" <%q >"${temp_dir}/stdout" 2>"${temp_dir}/stderr"; script_status=$?; echo "${script_status}" >"${temp_dir}/exit_status"; touch "${temp_dir}/done"; exit "${script_status}"' "${remote_stdin_file}";
            local task_status=$?;
            local task_status_retrieved=false;
            local stdout_retrieved=false;
            local stderr_retrieved=false;
            local call_result;
            if [ "${task_status}" != 255 ]; then
                task_status_retrieved=true;
            fi;
            local started_at="${SECONDS}";
            local retry_limit="${REMOTE_RECONNECT_TIME_LIMIT:-600}";
            local first_run=true;
            local notice_prefix="[NOTICE] " notice_postfix="";
            if [ -t 2 ]; then
                notice_prefix="$(printf "setaf 14\nbold" | tput -S 2> /dev/null)";
                notice_postfix="$(tput sgr 0 2> /dev/null)";
            fi;
            while true; do
                if [ "${first_run}" = true ]; then
                    first_run=false;
                else
                    sleep "${REMOTE_RECONNECT_DELAY:-5}";
                    if [ "$(( SECONDS - started_at ))" -ge "${retry_limit}" ]; then
                        softfail "Unable to obtain task result, maximum time limit reached";
                        return 1;
                    fi;
                    echo "${notice_prefix}Attempting to obtain result ($(( retry_limit - (SECONDS - started_at) )) second(s) till timeout)...${notice_postfix}" 1>&2;
                fi;
                if [ "${task_status_retrieved}" = false ]; then
                    ssh::call::invoke "${remote_temp_dir}" "${ssh_destination}" 'test -f "${temp_dir}/done"';
                    call_result=$?;
                    if [ "${call_result}" = 255 ]; then
                        continue;
                    else
                        if [ "${call_result}" != 0 ]; then
                            ssh::call::invoke "${remote_temp_dir}" "${ssh_destination}" 'test -d "${temp_dir}"';
                            call_result=$?;
                            if [ "${call_result}" != 0 ] && [ "${call_result}" != 255 ]; then
                                softfail "Unable to find remote task state directory, remote host may have been rebooted";
                                return 1;
                            fi;
                            ssh::call::invoke "${remote_temp_dir}" "${ssh_destination}" 'test -f "${temp_dir}/stdout"';
                            call_result=$?;
                            if [ "${call_result}" != 0 ] && [ "${call_result}" != 255 ]; then
                                softfail "It seems that the remote command did not even start";
                                return 1;
                            fi;
                            continue;
                        fi;
                    fi;
                    task_status="$(ssh::call::invoke "${remote_temp_dir}" "${ssh_destination}" 'cat "${temp_dir}/exit_status"')";
                    call_result=$?;
                    if [ "${call_result}" = 255 ]; then
                        continue;
                    else
                        if [ "${call_result}" != 0 ]; then
                            softfail "Unable to obtain exit status from remote";
                            return 1;
                        fi;
                    fi;
                    if ! [[ "${task_status}" =~ ^[0-9]+$ ]]; then
                        task_status=1;
                    fi;
                    task_status_retrieved=true;
                fi;
                if [ "${stdout_retrieved}" = false ]; then
                    ssh::call::invoke "${remote_temp_dir}" "${ssh_destination}" 'cat "${temp_dir}/stdout"' > "${temp_dir}/stdout";
                    call_result=$?;
                    if [ "${call_result}" = 255 ]; then
                        continue;
                    else
                        if [ "${call_result}" != 0 ]; then
                            softfail "Unable to obtain stdout from remote";
                            return 1;
                        fi;
                    fi;
                    stdout_retrieved=true;
                fi;
                if [ "${stderr_retrieved}" = false ]; then
                    ssh::call::invoke "${remote_temp_dir}" "${ssh_destination}" 'cat "${temp_dir}/stderr"' > "${temp_dir}/stderr";
                    call_result=$?;
                    if [ "${call_result}" = 255 ]; then
                        continue;
                    else
                        if [ "${call_result}" != 0 ]; then
                            softfail "Unable to obtain stderr from remote";
                            return 1;
                        fi;
                    fi;
                    stderr_retrieved=true;
                fi;
                local remote_checksum;
                local local_checksum;
                remote_checksum="$(ssh::call::invoke "${remote_temp_dir}" "${ssh_destination}" '{ cat "${temp_dir}/stdout" "${temp_dir}/stderr" && touch "${temp_dir}/output_concat_good"; } | cksum && test -f "${temp_dir}/output_concat_good"')";
                call_result=$?;
                if [ "${call_result}" = 255 ]; then
                    continue;
                else
                    if [ "${call_result}" != 0 ]; then
                        softfail "Unable to obtain checksums from remote";
                        return 1;
                    fi;
                fi;
                local_checksum="$(cat "${temp_dir}/stdout" "${temp_dir}/stderr" | cksum; test "${PIPESTATUS[*]}" = "0 0")" || softfail "Unable to get local output checksum" || return $?;
                if [ "${remote_checksum}" != "${local_checksum}" ]; then
                    softfail "Output checksum mismatch";
                    return 1;
                fi;
                break;
            done;
            local error_state=false;
            if [ -s "${temp_dir}/stdout" ]; then
                cat "${temp_dir}/stdout" || { 
                    echo "Unable to display task stdout ($?)" 1>&2;
                    error_state=true
                };
            fi;
            if [ -s "${temp_dir}/stderr" ]; then
                if test -t 2; then
                    local error_color;
                    error_color="$(printf "setaf 9\nbold" | tput -S 2> /dev/null)" || error_color="";
                    local reset_attrs;
                    reset_attrs="$(tput sgr 0 2> /dev/null)" || reset_attrs="";
                    local error_line;
                    while IFS="" read -r error_line; do
                        echo "${error_color}${error_line}${reset_attrs}" 1>&2;
                    done < "${temp_dir}/stderr" || { 
                        echo "Unable to display task stderr ($?)" 1>&2;
                        error_state=true
                    };
                else
                    cat "${temp_dir}/stderr" 1>&2 || { 
                        echo "Unable to display task stderr ($?)" 1>&2;
                        error_state=true
                    };
                fi;
            fi;
            if [ "${error_state}" = true ]; then
                softfail "Error reading STDOUT/STDERR in ssh::call";
                return 1;
            fi;
        fi;
    fi;
    if [ "${keep_temp_files}" != true ]; then
        ssh::call::invoke "${remote_temp_dir}" "${ssh_destination}" 'rm -fd "${temp_dir}/script" "${temp_dir}/stdin" "${temp_dir}/stdout" "${temp_dir}/stderr" "${temp_dir}/output_concat_good" "${temp_dir}/exit_status" "${temp_dir}/done" "${temp_dir}"';
        softfail --unless-good --status $? "Unable to remove remote temp files";
        if [ -n "${upload_remote_temp:-}" ]; then
            ssh "${Ssh_Args[@]}" "${ssh_destination}" "$(printf "sh -c %q" "$(printf "rm -rf %q" "${upload_remote_temp}")")";
            softfail --unless-good --status $? "Unable to remove remote temp directory for file upload";
        fi;
    fi;
    return "${task_status}"
}
ssh::call::set_ssh_args () 
{ 
    dir::ensure_exists --mode 0700 "${HOME}/.ssh" || softfail "Unable to create directory: ${HOME}/.ssh" || return $?;
    dir::ensure_exists --mode 0700 "${HOME}/.ssh/control-sockets" || softfail "Unable to create directory: ${HOME}/.ssh/control-sockets" || return $?;
    if ! [[ "${OSTYPE}" =~ ^msys ]] && [ "${REMOTE_CONTROL_MASTER:-}" != "no" ]; then
        Ssh_Args+=("-o" "ControlMaster=${REMOTE_CONTROL_MASTER:-"auto"}");
        if [ "${REMOTE_FORWARD_AGENT:-}" = true ]; then
            Ssh_Args+=("-S" "${REMOTE_CONTROL_PATH:-"${HOME}/.ssh/control-sockets/%C.with-forward-agent"}");
        else
            Ssh_Args+=("-S" "${REMOTE_CONTROL_PATH:-"${HOME}/.ssh/control-sockets/%C"}");
        fi;
        Ssh_Args+=("-o" "ControlPersist=${REMOTE_CONTROL_PERSIST:-"600"}");
    fi;
    if [ "${REMOTE_FORWARD_AGENT:-}" = true ]; then
        Ssh_Args+=("-o" "ForwardAgent=yes");
    fi;
    if [ -n "${REMOTE_IDENTITY_FILE:-}" ]; then
        Ssh_Args+=("-i" "${REMOTE_IDENTITY_FILE}");
    fi;
    if [ -n "${REMOTE_PORT:-}" ]; then
        Ssh_Args+=("-p" "${REMOTE_PORT}");
    fi;
    if [ "${REMOTE_SERVER_ALIVE_INTERVAL:-}" != "unset" ]; then
        Ssh_Args+=("-o" "ServerAliveInterval=${REMOTE_SERVER_ALIVE_INTERVAL:-"20"}");
    fi;
    if [ -n "${REMOTE_USER:-}" ]; then
        Ssh_Args+=("-l" "${REMOTE_USER}");
    fi
}
ssh::call::produce_script () 
{ 
    local command_mode=false;
    local terminal_mode=false;
    local cd_to_home=false;
    while [ "$#" -gt 0 ]; do
        case "$1" in 
            --command)
                command_mode=true;
                shift
            ;;
            --home)
                cd_to_home=true;
                shift
            ;;
            --terminal)
                terminal_mode=true;
                shift
            ;;
            -*)
                softfail "Unknown argument: $1" || return $?
            ;;
            *)
                break
            ;;
        esac;
    done;
    local joined_command="$*";
    if [ -n "${joined_command//[[:blank:][:cntrl:]]/}" ]; then
        local command_present=true;
    else
        local command_present=false;
    fi;
    if [ "${command_present}" = false ] && [ "${terminal_mode}" = false ]; then
        softfail "Command should be specified (note that ssh::call may ate your first argument as a host name if REMOTE_HOST is not provided)";
        return $?;
    fi;
    if shopt -o -q xtrace; then
        if [ -n "${PS4:-}" ]; then
            printf "PS4=%q\n" "${PS4}" || softfail;
        fi;
        echo "set -o xtrace";
    fi;
    if shopt -o -q nounset; then
        echo "set -o nounset";
    fi;
    local env_list=();
    if [ -n "${REMOTE_ENV:-}" ]; then
        IFS=" " read -r -a env_list <<< "${REMOTE_ENV}" || softfail || return $?;
    fi;
    local env_list_item;
    for env_list_item in "${env_list[@]}";
    do
        if [ -n "${!env_list_item:-}" ]; then
            printf "export %s\n" "$(printf "%q=%q" "${env_list_item}" "${!env_list_item}")";
        fi;
    done;
    if [ "${command_mode}" = false ] && [ "${command_present}" = true ] && declare -F "$1" > /dev/null; then
        if [ -z "${PS1:-}" ]; then
            declare -f || softfail "Unable to produce source code dump of functions" || return $?;
        else
            local function_name;
            declare -F | while IFS="" read -r function_name; do
                if ! ssh::call::interactive_terminal_functions_filter "${function_name:11}"; then
                    declare -f "${function_name:11}" || softfail "Unable to produce source code dump of function: ${function_name:11}" || return $?;
                fi;
            done;
        fi;
    fi;
    if [ "${cd_to_home}" = true ]; then
        echo 'cd "${HOME}" || exit $?';
    fi;
    if [ -n "${REMOTE_DIR:-}" ]; then
        printf "cd %q || exit \$?\n" "${REMOTE_DIR}";
    fi;
    if [ -n "${REMOTE_NON_ROOT_UMASK:-}" ]; then
        printf "if [ \"\${EUID}\" != 0 ]; then umask %q || exit \$?; fi\n" "${REMOTE_NON_ROOT_UMASK}";
    fi;
    if [ -n "${REMOTE_UMASK:-}" ]; then
        printf "umask %q || exit \$?\n" "${REMOTE_UMASK}";
    fi;
    local locale_list=();
    if [ -n "${REMOTE_LOCALE:-}" ]; then
        IFS=" " read -r -a locale_list <<< "${REMOTE_LOCALE}" || softfail || return $?;
    fi;
    if [ "${#locale_list[@]}" != 0 ]; then
        printf "unset -v LANG LANGUAGE \"\${!LC_@}\" || { echo 'Error unsetting locales' >&2; exit 1; }\n";
        local locale_item;
        for locale_item in "${locale_list[@]}";
        do
            printf "export %q || { echo 'Error setting REMOTE_LOCALE values' >&2; exit 1; }\n" "${locale_item}";
        done;
    fi;
    if [ "${command_present}" = false ] && [ "${terminal_mode}" = true ]; then
        echo '"${SHELL}"';
    else
        local command_string;
        printf -v command_string " %q" "$@" || softfail || return $?;
        echo "${command_string:1}";
    fi
}
ssh::call::interactive_terminal_functions_filter () 
{ 
    local function_name="$1";
    [ "${function_name:0:1}" = "_" ] || [[ "${function_name}" =~ ^(asdf|command_not_found_handle|dequote|quote|quote_readline)$ ]]
}
ssh::call::invoke () 
{ 
    local nohup_mode=false;
    local terminal_mode;
    while [ "$#" -gt 0 ]; do
        case "$1" in 
            --nohup)
                nohup_mode=true;
                shift
            ;;
            --terminal)
                terminal_mode=true;
                shift
            ;;
            -*)
                softfail "Unknown argument: $1" || return $?
            ;;
            *)
                break
            ;;
        esac;
    done;
    local remote_temp_dir="$1";
    shift;
    local ssh_destination="$1";
    shift;
    local command_string="$1";
    shift;
    command_string="$(printf "temp_dir=%q; ${command_string}" "${remote_temp_dir}" "$@")";
    if [ "${nohup_mode}" = true ]; then
        command_string="$(printf "nohup sh -c %q >/dev/null 2>/dev/null </dev/null" "${command_string}")";
    fi;
    ssh ${terminal_mode:+"-t"} "${Ssh_Args[@]}" "${ssh_destination}" "$(printf "sh -c %q" "${command_string}")"
}

# Run the ssh::call if the script is executed directly, not sourced
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  ssh::call --command "$@"
  softfail --unless-good --status $? "ssh::call command failed to complete successfully." || exit $?
fi
