#!/usr/bin/env bash

#  Copyright 2012-2019 Stanislav Senotrusov <stan@senotrusov.com>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

if [ "${VERBOSE:-}" = true ]; then
  set -o xtrace
fi

set -o nounset

fail() {
  echo "${BASH_SOURCE[1]}:${BASH_LINENO[0]}: in \`${FUNCNAME[1]}': Error: ${1:-"Abnormal termination"}" >&2
  exit "${2:-1}"
}

if [ -L "${BASH_SOURCE[0]}" ]; then
  SOPKA_LIB_DIR="$(readlink -f "${BASH_SOURCE[0]}")" || fail "Unable to readlink ${BASH_SOURCE[0]} ($?)"
else
  SOPKA_LIB_DIR="${BASH_SOURCE[0]}"
fi

SOPKA_LIB_DIR="$(dirname "${SOPKA_LIB_DIR}")" || fail "Unable to get a dirname of ${SOPKA_LIB_DIR} ($?)"
SOPKA_LIB_DIR="$(cd "${SOPKA_LIB_DIR}"/.. >/dev/null 2>&1 && pwd)" || fail "Unable to determine full path for SOPKA_LIB_DIR ($?)"

export SOPKA_LIB_DIR

. "${SOPKA_LIB_DIR}/index.sh" || fail

if [ -f "./sopka.sh" ]; then
  SOPKA_DIR="$(pwd)" || fail "Unable to get current directory ($?)"
  export SOPKA_DIR
  . "./sopka.sh" || fail "Error loading ./sopka.sh ($?)"
elif [ -f "${HOME}/.sopka/index.sh" ]; then
  export SOPKA_DIR="${HOME}/.sopka"
  . "${HOME}/.sopka/index.sh" || fail "Error loading ${HOME}/.sopka/index.sh ($?)"
else
  fail "Unable to find ./sopka.sh or ${HOME}/.sopka/index.sh"
fi

if [[ "$OSTYPE" =~ ^msys ]]; then
  if [ -z "${SOPKA_WIN_DIR:-}" ]; then
    SOPKA_WIN_DIR="$(echo "${SOPKA_DIR}" | sed "s/^\\/\\([[:alpha:]]\\)\\//\\1:\\//" | sed "s/\\//\\\\/g"; test "${PIPESTATUS[*]}" = "0 0 0" )" || fail
    export SOPKA_WIN_DIR
  fi
fi

# I use "test" instead of "|| fail" here for the case if someone wants to "set -o errexit" in their functions
if [ -n "${1:-}" ]; then
  declare -f "$1" >/dev/null || fail "Argument must be a function name: $1"
  "$1" "${@:2}"
  test $? = 0 || fail "Error performing $1"
else
  if declare -f sopka::menu >/dev/null; then
    sopka::menu
    test $? = 0 || fail "Error performing sopka::menu"
  else
    fail "sopka::menu function must be defined"
  fi
fi
