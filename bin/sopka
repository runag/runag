#!/usr/bin/env bash

#  Copyright 2012-2021 Stanislav Senotrusov <stan@senotrusov.com>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

if [ "${0:0:1}" != "-" ]; then
  # set shell options
  if [ "${VERBOSE:-}" = true ]; then
    set -o xtrace
  fi
  set -o nounset
fi

# define fail() function
fail() {
  local i perhapsDelimiter="" startFrom=$((${#BASH_LINENO[@]}-1))
  for ((i=startFrom; i>=1; i--)); do
    if [ ${i} != ${startFrom} ]; then
      printf "\n" >&2
    fi
    if [ ${i} = 1 ]; then
      perhapsDelimiter=": "
    fi
    echo -n "${BASH_SOURCE[${i}]}:${BASH_LINENO[$((i-1))]}: in \`${FUNCNAME[${i}]}'${perhapsDelimiter}" >&2
  done
  echo "${1:-"Abnormal termination"}" >&2
  exit "${2:-1}"
}

# determine SOPKA_DIR
if [ -L "${BASH_SOURCE[0]}" ]; then
  SOPKA_DIR="$(readlink -f "${BASH_SOURCE[0]}")" || fail "Unable to readlink ${BASH_SOURCE[0]} ($?)"
else
  SOPKA_DIR="${BASH_SOURCE[0]}"
fi

SOPKA_DIR="$(dirname "${SOPKA_DIR}")" || fail "Unable to get a dirname of ${SOPKA_DIR} ($?)"
SOPKA_DIR="$(cd "${SOPKA_DIR}"/.. >/dev/null 2>&1 && pwd)" || fail "Unable to determine full path for SOPKA_DIR ($?)"

export SOPKA_DIR


# load all libraries (also determine SOPKA_WIN_DIR)
. "${SOPKA_DIR}/index.sh" || fail


# find sopkafile, set SOPKAFILE_DIR and SOPKAFILE_WIN_DIR, load sopkafile
#
# possible sopkafile locations are:
#
# ./sopkafile
# ./sopkafile/index.sh
#
# ~/.sopkafile
# ~/.sopkafile/index.sh

sopka::load-sopkafile() {
  local targetDir="$1"
  local targetFile="$2"

  SOPKAFILE_DIR="$(cd "${targetDir}" >/dev/null 2>&1 && pwd)" || fail "Unable to get sopkafile directory ($?)"
  export SOPKAFILE_DIR

  if [[ "${OSTYPE}" =~ ^msys ]]; then
    if [ -z "${SOPKAFILE_WIN_DIR:-}" ]; then
      SOPKAFILE_WIN_DIR="$(echo "${SOPKAFILE_DIR}" | sed "s/^\\/\\([[:alpha:]]\\)\\//\\1:\\//" | sed "s/\\//\\\\/g"; test "${PIPESTATUS[*]}" = "0 0 0" )" || fail
      export SOPKAFILE_WIN_DIR
    fi
  fi

  . "${targetDir}/${targetFile}" || fail
}

if [ -f "./sopkafile" ]; then
  sopka::load-sopkafile "." "sopkafile" || fail

elif [ -f "./sopkafile/index.sh" ]; then
  sopka::load-sopkafile "./sopkafile" "index.sh" || fail

elif [ -n "${HOME:-}" -a -f "${HOME:-}/.sopkafile" ]; then
  sopka::load-sopkafile "${HOME}" ".sopkafile" || fail

elif [ -n "${HOME:-}" -a -f "${HOME:-}/.sopkafile/index.sh" ]; then
  sopka::load-sopkafile "${HOME}/.sopkafile" "index.sh" || fail

else
  fail "Unable to find sopkafile"
fi

# run function provided in first argument, or run sopkafile::main, if defined
# I use "test" instead of "|| fail" here for the case if someone wants to
# "set -o errexit" in their functions
if [ -n "${1:-}" ]; then
  declare -f "$1" >/dev/null || fail "Argument must be a function name: $1"
  "$1" "${@:2}"
  test $? = 0 || fail "Error performing $1"
else
  if [ "${0:0:1}" != "-" ] && [ "$(basename "$0")" = "sopka" ]; then
    if declare -f sopkafile::main >/dev/null; then
      sopkafile::main
      test $? = 0 || fail "Error performing sopkafile::main"
    else
      fail "please specify a function name to run, or define a sopkafile::main"
    fi
  fi
fi
