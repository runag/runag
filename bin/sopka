#!/usr/bin/env bash

#  Copyright 2012-2021 Stanislav Senotrusov <stan@senotrusov.com>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# set shell options if we are not sourced
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  if [ "${SOPKA_VERBOSE:-}" = true ]; then
    set -o xtrace
  fi
  set -o nounset
fi

sopka::load-index() {
  # resolve symlink if needed
  if [ -L "${BASH_SOURCE[0]}" ]; then
    local binPath; binPath="$(readlink -f "${BASH_SOURCE[0]}")" || { echo "Sopka: Unable to readlink '${BASH_SOURCE[0]}' ($?)" >&2; return 1; }
  else
    local binPath; binPath="${BASH_SOURCE[0]}"
  fi

  # get basename of binary
  local binName; binName="$(basename "${binPath}")" || { echo "Sopka: Unable to get a basename of '${binPath}' ($?)" >&2; return 1; }

  # get dirname that yet may result to relative path
  local unresolvedBinDir; unresolvedBinDir="$(dirname "${binPath}")" || { echo "Sopka: Unable to get a dirname of '${binPath}' ($?)" >&2; return 1; }

  # get absolute path to dirname
  local binDir; binDir="$(cd "${unresolvedBinDir}" >/dev/null 2>&1 && pwd)" || { echo "Sopka: Unable to determine absolute path for '${unresolvedBinDir}' ($?)" >&2; return 1; }

  # set SOPKA_BIN_PATH if needed
  if [ -z "${SOPKA_BIN_PATH:-}" ] && [ -f "${binDir}/${binName}" ] && [ -x "${binDir}/${binName}" ]; then
    export SOPKA_BIN_PATH="${binDir}/${binName}"
  fi

  . "${binDir}/../index.sh" || { echo "Sopka: Unable to load '${binDir}/../index.sh' ($?)" >&2; return 1; }
}

# Load sopka library index file
sopka::load-index || {
  echo "Sopka: Unable to load sopka library index file ($?)" >&2
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then return 1; else exit 1; fi # use return if we are sourced, use exit if not
}

# == we should have all library functions available by now ==

# I don't use "|| fail" here in case if someone wants to use "set -o errexit" in their functions that I may call here

# Load sopkafile
sopka::load-sopkafile
if ! sopka::passthrough-and-log-error "Sopka: Unable to load sopkafile ($?)" $?; then
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then return 1; else exit 1; fi # use return if we are sourced, use exit if not
fi

# if there is something in the first argument, run it
if [ -n "${1:-}" ]; then
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then # we are sourced
    "$@"
    sopka::passthrough-and-log-error "Sopka: Error performing $1 ($?)" $?
    return
  else # we are not sourced
    "$@"
    sopka::passthrough-and-log-error "Sopka: Error performing $1 ($?)" $?
    exit
  fi
fi

# if we are not sourced, try to run sopkafile::main or display sopka-menu 
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  if declare -f sopkafile::main >/dev/null; then
    sopkafile::main
    sopka::passthrough-and-log-error "Sopka: Error performing sopkafile::main ($?)" $?
    exit
  elif sopka-menu::is-present; then
    sopka-menu::display
    sopka::passthrough-and-log-error "Sopka: Error performing sopka-menu::display ($?)" $?
    exit
  fi

  log::error "Sopka: Please specify a function name or command to run, or define a sopkafile::main, or add one or more items to sopka-menu"
  exit 1
fi
