#!/usr/bin/env bash

#  Copyright 2012-2021 Stanislav Senotrusov <stan@senotrusov.com>
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

if [ "${0:0:1}" != "-" ]; then
  # set shell options
  if [ "${SOPKA_VERBOSE:-}" = true ]; then
    set -o xtrace
  fi
  set -o nounset
fi

# define fail() function early
fail() {
  local errorColor=""
  local normalColor=""

  if [ -t 2 ]; then
    local colorsAmount; colorsAmount="$(tput colors 2>/dev/null)"

    # shellcheck disable=SC2181
    if [ $? = 0 ] && [ "${colorsAmount}" -ge 2 ]; then
      errorColor="$(tput setaf 1)"
      normalColor="$(tput sgr 0)"
    fi
  fi

  echo "${errorColor}${1:-"Abnormal termination"}${normalColor}" >&2

  local i endAt=$((${#BASH_LINENO[@]}-1))
  for ((i=1; i<=endAt; i++)); do
    echo "  ${errorColor}${BASH_SOURCE[${i}]}:${BASH_LINENO[$((i-1))]}: in \`${FUNCNAME[${i}]}'${normalColor}" >&2
  done

  exit "${2:-1}"
}

export SOPKA_BIN_PATH="${BASH_SOURCE[0]}"

sopka::load-index() {
  local sopkaBinRealPath sopkaBinRealDirPath sopkaIndexDir

  if [ -L "${SOPKA_BIN_PATH}" ]; then
    sopkaBinRealPath="$(readlink -f "${SOPKA_BIN_PATH}")" || fail "Unable to readlink ${SOPKA_BIN_PATH} ($?)"
  else
    sopkaBinRealPath="${SOPKA_BIN_PATH}"
  fi
 
  sopkaBinRealDirPath="$(dirname "${sopkaBinRealPath}")" || fail "Unable to get a dirname of ${sopkaBinRealPath} ($?)"
  sopkaIndexDir="$(cd "${sopkaBinRealDirPath}"/.. >/dev/null 2>&1 && pwd)" || fail "Unable to determine full path for ${sopkaBinRealDirPath}/.. ($?)"

  . "${sopkaIndexDir}/index.sh" || fail
}


# Find and load sopkafile.
#
# Possible locations are:
#
# ./sopkafile
# ./sopkafile/index.sh
#
# ~/.sopkafile
# ~/.sopkafile/index.sh
#
# ~/.sopka/sopkafiles/*/index.sh
#
sopka::load-sopkafile() {
  if [ -f "./sopkafile" ]; then
    . "./sopkafile" || fail
  elif [ -f "./sopkafile/index.sh" ]; then
    . "./sopkafile/index.sh" || fail
  elif [ -n "${HOME:-}" ] && [ -f "${HOME:-}/.sopkafile" ]; then
    . "${HOME:-}/.sopkafile" || fail
  elif [ -n "${HOME:-}" ] && [ -f "${HOME:-}/.sopkafile/index.sh" ]; then
    . "${HOME:-}/.sopkafile/index.sh" || fail
  else
    local filePath fileFound=false
    for filePath in "${HOME}"/.sopka/sopkafiles/*/index.sh; do
      if [ -f "${filePath}" ]; then
        . "${filePath}" || fail
        fileFound=true
      fi
    done
    if [ "${fileFound}" = false ]; then
      fail "Unable to find sopkafile"
    fi
  fi
}

sopka::load-index || fail
sopka::load-sopkafile || fail

# run function provided in first argument, or run sopkafile::main, if defined
# I use "test" instead of "|| fail" here for the case if someone wants to
# "set -o errexit" in their functions
if [ -n "${1:-}" ]; then
  declare -f "$1" >/dev/null || fail "Argument must be a function name: $1"
  "$1" "${@:2}"
  test $? = 0 || fail "Error performing $1"
else
  if [ "${0:0:1}" != "-" ] && [ "$(basename "$0")" = "sopka" ]; then
    if declare -f sopkafile::main >/dev/null; then
      sopkafile::main
      test $? = 0 || fail "Error performing sopkafile::main"
    elif sopka::is-menu-present; then
      sopka::display-menu
      test $? = 0 || fail "Error performing sopka::display-menu"
    else
      fail "please specify a function name to run, define a sopkafile::main, or add items to a menu"
    fi
  fi
fi
