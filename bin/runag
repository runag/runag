#!/usr/bin/env bash

#  Copyright 2012-2024 Rùnag project contributors
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# BEGIN set_shell_options
# Set shell options only if the script is not sourced
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  # Enable verbose mode if RUNAG_VERBOSE is true
  if [ "${RUNAG_VERBOSE:-}" = true ]; then
    # PS4: Customize trace output to include subshell, filename, line number, and function name
    PS4='+${BASH_SUBSHELL} ${BASH_SOURCE:+"${BASH_SOURCE}:${LINENO}: "}${FUNCNAME[0]:+"in \`${FUNCNAME[0]}'"'"' "}** '
    set -o xtrace   # Enable command tracing
  fi
  set -o nounset    # Treat unset variables as an error
fi
# END set_shell_options

# BEGIN load_runag_library
# Function to load the rùnag library from a given directory
runag::load_runag_library() {
  local self_path   # Absolute path to this script
  local lib_dir     # Library directory path
  local file_path   # Path to individual library file

  # If the script is a symlink, resolve it to determine the actual script path
  if [ -L "${BASH_SOURCE[0]}" ]; then
    self_path="$(readlink -f "${BASH_SOURCE[0]}")" || {
      echo "Error: Unable to resolve symlink ${BASH_SOURCE[0]} ($?)" >&2
      return 1
    }
  else
    self_path="${BASH_SOURCE[0]}"
  fi

  # Derive library directory path by appending provided argument to script directory
  lib_dir="$(dirname "${self_path}")/$1" || {
    echo "Error: Unable to determine directory for ${self_path} ($?)" >&2
    return 1
  }

  # Verify that the library directory exists
  if [ ! -d "${lib_dir}" ]; then
    echo "Error: rùnag library directory not found: ${lib_dir}" >&2
    return 1
  fi

  # Source all .sh files in the library directory
  for file_path in "${lib_dir}"/*.sh; do
    if [ -f "${file_path}" ]; then
      . "${file_path}" || {
        echo "Error: Unable to load library file ${file_path} ($?)" >&2
        return 1
      }
    fi
  done
}

# Load the rùnag library
runag::load_runag_library "../lib" || {
  echo "Error: Failed to load rùnag library ($?)" >&2
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then
    return 1  # Use return when sourced
  else
    exit 1    # Use exit when run directly
  fi
}
# END load_runag_library

# BEGIN invoke_runagfile
# == By now, all required library functions should be available ==

# Option to skip loading the runagfile
if [ "${1:-}" == "--skip-runagfile-load" ]; then
  shift  # Remove the argument from the positional parameters
else
  # Load the rùnagfile
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then # Script is sourced
    runagfile::load --if-exists
    softfail --unless-good --status $? "Error: Failed to load rùnagfile ($?)" || return $?
  else # Script is run directly
    runagfile::load
    softfail --unless-good --status $? "Error: Failed to load rùnagfile ($?)" || exit $?
  fi
fi

# If the first argument is provided, treat it as a command, run it, and then exit or return depending on whether the script is sourced
if [ -n "${1:-}" ]; then
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then  # Script is sourced
    "$@"
    softfail --unless-good --status $? "Error: Failed ($?) to run command: $*"
    return $?
  else  # Script is run directly
    "$@"
    softfail --unless-good --status $? "Error: Failed ($?) to run command: $*"
    exit $?
  fi
fi

# If no command is provided and the script is not sourced, attempt to run runagfile::main or display available tasks
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  if declare -F runagfile::main >/dev/null; then
    # Call the main function if it exists
    runagfile::main
    softfail --unless-good --status $? "Error: Failed to run runagfile::main ($?)"
    exit $?
  elif task::any && [ -t 0 ] && [ -t 1 ]; then
    # Display tasks interactively if available
    task::display
    softfail --unless-good --status $? "Error: Failed to display tasks ($?)"
    exit $?
  fi

  # Log an error if no entry point or command is provided
  log::error "Error: No function or command specified. Define 'runagfile::main' or supply a valid command to proceed."
  
  printf "\n"

  if task::any; then
    task::render --non-interactive || softfail || exit $?
  fi

  exit 1
fi
# END invoke_runagfile
