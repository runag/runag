#!/usr/bin/env bash

#  Copyright 2012-2025 Runag project contributors
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# BEGIN set_shell_options
# Configure shell options unless the script is being sourced
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  # Enable trace output if RUNAG_VERBOSE is set to true
  if [ "${RUNAG_VERBOSE:-}" = true ]; then
    # Show subshell level, function name, source file, and line number in trace output
    PS4='+${FUNCNAME[0]:+" ${FUNCNAME[0]}"}${BASH_SOURCE:+" (${BASH_SOURCE}:${LINENO})"}   '
    set -o xtrace
  fi
  # Exit immediately if an unset variable is referenced
  set -o nounset
fi
# END set_shell_options

# ## `runag::load_runag_library`
#
# Loads the core Runag library files required for script initialization.
#
# ### Usage
#
# runag::load_runag_library <library-directory>
#
# Arguments:
#   <library-directory>   Relative path to the directory containing Runag .sh library files
#
runag::load_runag_library() {
  local self_path="${BASH_SOURCE[0]}"
  local self_dir

  # Resolve the full path if the script is a symbolic link
  if [ -L "${self_path}" ]; then
    self_path="$(readlink -f "${self_path}")" || {
      echo "Could not resolve symbolic link for ${BASH_SOURCE[0]} (exit code $?)." >&2
      return 1
    }
  fi

  # Determine the directory in which the script resides
  self_dir="$(dirname "${self_path}")" || {
    echo "Could not determine the directory of ${self_path} (exit code $?)." >&2
    return 1
  }

  # Construct the path to the library directory
  local lib_dir="${self_dir}/$1"

  # Verify that the library directory exists
  test -d "${lib_dir}" || {
    echo "The specified library directory '${lib_dir}' was not found." >&2
    return 1
  }

  # Load each .sh file in the library directory
  local file_path; for file_path in "${lib_dir}"/core/*.sh "${lib_dir}"/integrations/*.sh "${lib_dir}"/workflows/*.sh; do
    if [ -f "${file_path}" ]; then
      # shellcheck disable=SC1090
      source "${file_path}" || {
        echo "Failed to load library file: ${file_path} (exit code $?)." >&2
        return 1
      }
    fi
  done
}

# Load all required Runag library files from the '../lib' directory
runag::load_runag_library "../lib" || {
  echo "Could not initialize the Runag library (exit code $?)." >&2
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then
    return 1 # Return if this script is being sourced
  else
    exit 1 # Exit if this script is being run directly
  fi
}

# Remove the function to avoid leaving it in the global namespace
unset -f runag::load_runag_library

# BEGIN invoke_command
# == By now, all required library functions should be available ==

# Option to skip loading the runagfile
if [ "${1:-}" == "--skip-runagfile-load" ]; then
  shift  # Remove the argument from the positional parameters
else
  # Load the runagfile
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then # Script is sourced
    runagfile::load --if-exists
    softfail --unless-good --status $? "Error: Failed to load runagfile ($?)" || return $?
  else # Script is run directly
    runagfile::load --if-exists
    softfail --unless-good --status $? "Error: Failed to load runagfile ($?)" || exit $?
  fi
fi

# If the first argument is provided, treat it as a command, run it, and then exit or return depending on whether the script is sourced
if [ -n "${1:-}" ]; then
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then  # Script is sourced
    "$@"
    softfail --unless-good --status $? "Error: Failed ($?) to run command: $*"
    return $?
  else  # Script is run directly
    "$@"
    softfail --unless-good --status $? "Error: Failed ($?) to run command: $*"
    exit $?
  fi
fi

# If no command is provided and the script is not sourced, attempt to run runagfile::main or display available tasks
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  if declare -F runagfile::main >/dev/null; then
    # Call the main function if it exists
    runagfile::main
    softfail --unless-good --status $? "Error: Failed to run runagfile::main ($?)"
    exit $?
  elif task::any && [ -t 0 ] && [ -t 1 ]; then
    # Display tasks interactively if available
    task::display
    softfail --unless-good --status $? "Error: Failed to display tasks ($?)"
    exit $?
  fi

  # Log an error if no entry point or command is provided
  log::err "Error: No function or command specified. Define 'runagfile::main' or supply a valid command to proceed."
  
  printf "\n"

  if task::any; then
    task::render --non-interactive || softfail || exit $?
  fi

  exit 1
fi
# END invoke_command
