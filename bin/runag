#!/usr/bin/env bash

#  Copyright 2012-2024 Rùnag project contributors
#
#  Licensed under the Apache License, Version 2.0 (the "License");
#  you may not use this file except in compliance with the License.
#  You may obtain a copy of the License at
#
#      http://www.apache.org/licenses/LICENSE-2.0
#
#  Unless required by applicable law or agreed to in writing, software
#  distributed under the License is distributed on an "AS IS" BASIS,
#  WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
#  See the License for the specific language governing permissions and
#  limitations under the License.

# BEGIN set_shell_options
# Set shell options if we are not sourced
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  if [ "${RUNAG_VERBOSE:-}" = true ]; then
    PS4='+${BASH_SUBSHELL} ${BASH_SOURCE:+"${BASH_SOURCE}:${LINENO}: "}${FUNCNAME[0]:+"in \`${FUNCNAME[0]}'"'"' "}** '
    set -o xtrace
  fi
  set -o nounset
fi
# END set_shell_options

# BEGIN load_runag_library
# Define function
runag::load_runag_library() {
  local self_path
  local lib_dir
  local file_path

  # resolve symlink if needed
  if [ -L "${BASH_SOURCE[0]}" ]; then
    self_path="$(readlink -f "${BASH_SOURCE[0]}")" || { echo "Unable to resolve symlink ${BASH_SOURCE[0]} ($?)" >&2; return 1; }
  else
    self_path="${BASH_SOURCE[0]}"
  fi

  # get dirname
  lib_dir="$(dirname "${self_path}")/$1" || { echo "Unable to get a dirname of ${self_path} ($?)" >&2; return 1; }

  # check if lib dir exists
  test -d "${lib_dir}" || { echo "Unable to find rùnag library directory ${lib_dir}" >&2; return 1; }

  # load library files
  for file_path in "${lib_dir}"/*.sh; do
    if [ -f "${file_path}" ]; then
      . "${file_path}" || { echo "Unable to load ${file_path} ($?)" >&2; return 1; }
    fi
  done
}

# Call function to load rùnag library
runag::load_runag_library "../lib" || {
  echo "Unable to load rùnag library ($?)" >&2
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then
    return 1 # use return if we are sourced
  else
    exit 1 # use exit if not
  fi
}
# END load_runag_library

# BEGIN invoke_runagfile
# == we should have all library functions available by now ==
# Load rùnagfile
if [ "${1:-}" == "--skip-runagfile-load" ]; then
  shift
else
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then # we are sourced
    runagfile::load
    softfail --unless-good --exit-status $? "Unable to load rùnagfile ($?)" || return $?
  else # we are not sourced
    runagfile::load
    softfail --unless-good --exit-status $? "Unable to load rùnagfile ($?)" || exit $?
  fi
fi

# if there is something in the first argument, run it
if [ -n "${1:-}" ]; then
  if [ "${BASH_SOURCE[0]}" != "$0" ]; then # we are sourced
    "$@"
    softfail --unless-good --exit-status $? "Error performing $1 ($?)" || return $?
    if [ -t 1 ]; then
      log::success "Done: $*"
    fi
    return 0
  else # we are not sourced
    "$@"
    softfail --unless-good --exit-status $? "Error performing $1 ($?)" || exit $?
    if [ -t 1 ]; then
      log::success "Done: $*"
    fi
    exit 0
  fi
fi

# if we are not sourced, try to run runagfile::main or display tasks 
if [ "${BASH_SOURCE[0]}" = "$0" ]; then
  if declare -F runagfile::main >/dev/null; then
    runagfile::main
    softfail --unless-good --exit-status $? "Error performing runagfile::main ($?)"
    exit $?
  elif task::any && [ -t 0 ] && [ -t 1 ]; then
    task::display
    softfail --unless-good --exit-status $? "Error performing task::display ($?)"
    exit $?
  fi

  log::error "Please specify a function name or command to run, or define a runagfile::main"
  log::error "You could also add items to task list and choose between them if you run rùnag in interactive terminal"
  exit 1
fi
# END invoke_runagfile
